var Tx = require('ethereumjs-tx').Transaction
const Web3 = require('web3');
require('dotenv').config()



const web3 = new Web3("https://ropsten.infura.io/v3/c310842fd9a843b3b03ba87116331805")
const account1 = "0x823E3a5Fc48C399Bd1EFF6C3460a7ec2E60A3c35"
const PrivateKey1 = process.env.KEYPAIR_1;
const PrivateKey1Buffer =Buffer.from(PrivateKey1,'hex');


web3.eth.getTransactionCount(account1, (err, txCount) => {

    
    const data =  "0x608060405260008060146101000a81548160ff021916908360028111156200002c576200002b620002dd565b5b02179055506040518060200160405280734b20993bc481177ec7e8f571cecae8a9e22c02db73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815250600390600162000092929190620001a8565b50348015620000a057600080fd5b50336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060005b600380549050811015620001a157600060026000600384815481106200010f576200010e6200030c565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508080620001989062000260565b915050620000e4565b506200033b565b82805482825590600052602060002090810192821562000224579160200282015b82811115620002235782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190620001c9565b5b50905062000233919062000237565b5090565b5b808211156200025257600081600090555060010162000238565b5090565b6000819050919050565b60006200026d8262000256565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415620002a357620002a2620002ae565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b610da4806200034b6000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c80630121b93f146100675780630fe03c2d1461008357806323efac841461009f5780633477ee2e146100bb578063f851a440146100ed578063fb9863bf1461010b575b600080fd5b610081600480360381019061007c91906109b0565b610127565b005b61009d600480360381019061009891906109b0565b610266565b005b6100b960048036038101906100b49190610925565b61035f565b005b6100d560048036038101906100d091906109b0565b610488565b6040516100e493929190610a4f565b60405180910390f35b6100f56105d2565b6040516101029190610a34565b60405180910390f35b610125600480360381019061012091906108f8565b6105f6565b005b6001600281111561013b5761013a610c5f565b5b600060149054906101000a900460ff16600281111561015d5761015c610c5f565b5b1461016757600080fd5b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16156101be57600080fd5b6101c73361070c565b6101d057600080fd5b600181815481106101e4576101e3610cbd565b5b9060005260206000209060030201600201600081548092919061020690610be7565b91905055506001600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146102be57600080fd5b60008114156102f25760008060146101000a81548160ff021916908360028111156102ec576102eb610c5f565b5b02179055505b6001811415610327576001600060146101000a81548160ff0219169083600281111561032157610320610c5f565b5b02179055505b600281141561035c576002600060146101000a81548160ff0219169083600281111561035657610355610c5f565b5b02179055505b50565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146103b757600080fd5b600060028111156103cb576103ca610c5f565b5b600060149054906101000a900460ff1660028111156103ed576103ec610c5f565b5b146103f757600080fd5b6001604051806060016040528085815260200184815260200183815250908060018154018082558091505060019003906000526020600020906003020160009091909190915060008201518160000190805190602001906104599291906107bb565b5060208201518160010190805190602001906104769291906107bb565b50604082015181600201555050505050565b6001818154811061049857600080fd5b90600052602060002090600302016000915090508060000180546104bb90610b84565b80601f01602080910402602001604051908101604052809291908181526020018280546104e790610b84565b80156105345780601f1061050957610100808354040283529160200191610534565b820191906000526020600020905b81548152906001019060200180831161051757829003601f168201915b50505050509080600101805461054990610b84565b80601f016020809104026020016040519081016040528092919081815260200182805461057590610b84565b80156105c25780601f10610597576101008083540402835291602001916105c2565b820191906000526020600020905b8154815290600101906020018083116105a557829003601f168201915b5050505050908060020154905083565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461064e57600080fd5b6003819080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555050565b600080600090505b6003805490508110156107b0576003818154811061073557610734610cbd565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141561079d5760019150506107b6565b80806107a890610be7565b915050610714565b50600090505b919050565b8280546107c790610b84565b90600052602060002090601f0160209004810192826107e95760008555610830565b82601f1061080257805160ff1916838001178555610830565b82800160010185558215610830579182015b8281111561082f578251825591602001919060010190610814565b5b50905061083d9190610841565b5090565b5b8082111561085a576000816000905550600101610842565b5090565b600061087161086c84610ab9565b610a94565b90508281526020810184848401111561088d5761088c610d20565b5b610898848285610b42565b509392505050565b6000813590506108af81610d40565b92915050565b600082601f8301126108ca576108c9610d1b565b5b81356108da84826020860161085e565b91505092915050565b6000813590506108f281610d57565b92915050565b60006020828403121561090e5761090d610d2a565b5b600061091c848285016108a0565b91505092915050565b60008060006060848603121561093e5761093d610d2a565b5b600084013567ffffffffffffffff81111561095c5761095b610d25565b5b610968868287016108b5565b935050602084013567ffffffffffffffff81111561098957610988610d25565b5b610995868287016108b5565b92505060406109a6868287016108e3565b9150509250925092565b6000602082840312156109c6576109c5610d2a565b5b60006109d4848285016108e3565b91505092915050565b6109e681610b06565b82525050565b60006109f782610aea565b610a018185610af5565b9350610a11818560208601610b51565b610a1a81610d2f565b840191505092915050565b610a2e81610b38565b82525050565b6000602082019050610a4960008301846109dd565b92915050565b60006060820190508181036000830152610a6981866109ec565b90508181036020830152610a7d81856109ec565b9050610a8c6040830184610a25565b949350505050565b6000610a9e610aaf565b9050610aaa8282610bb6565b919050565b6000604051905090565b600067ffffffffffffffff821115610ad457610ad3610cec565b5b610add82610d2f565b9050602081019050919050565b600081519050919050565b600082825260208201905092915050565b6000610b1182610b18565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b82818337600083830152505050565b60005b83811015610b6f578082015181840152602081019050610b54565b83811115610b7e576000848401525b50505050565b60006002820490506001821680610b9c57607f821691505b60208210811415610bb057610baf610c8e565b5b50919050565b610bbf82610d2f565b810181811067ffffffffffffffff82111715610bde57610bdd610cec565b5b80604052505050565b6000610bf282610b38565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610c2557610c24610c30565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b610d4981610b06565b8114610d5457600080fd5b50565b610d6081610b38565b8114610d6b57600080fd5b5056fea2646970667358221220edb7acc5ff8251f870f9be9734c3ba31af69ca8bff361796be0ec9d37da1e0b664736f6c63430008070033" // Your data value goes here...
  
    const txObject = {
      nonce:    web3.utils.toHex(txCount),
      gasLimit: web3.utils.toHex(1000000),
      gasPrice: web3.utils.toHex(web3.utils.toWei('10', 'gwei')),
      data: data
    }

  const tx = new Tx(txObject, { chain: 'ropsten' })
  tx.sign(PrivateKey1Buffer)

  const serializedTx = tx.serialize()
  const raw = '0x' + serializedTx.toString('hex')

  web3.eth.sendSignedTransaction(raw, (err, txHash) => {
    console.log('err:', err, 'txHash:', txHash)
    // Use this txHash to find the contract on Etherscan!
    let abi=[
        {
            "inputs": [],
            "stateMutability": "nonpayable",
            "type": "constructor"
        },
        {
            "inputs": [
                {
                    "internalType": "string",
                    "name": "_name",
                    "type": "string"
                },
                {
                    "internalType": "string",
                    "name": "_partyName",
                    "type": "string"
                },
                {
                    "internalType": "uint256",
                    "name": "_noOfvotes",
                    "type": "uint256"
                }
            ],
            "name": "addCandidates",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "_avalidAdress",
                    "type": "address"
                }
            ],
            "name": "addValidAdress",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "admin",
            "outputs": [
                {
                    "internalType": "address",
                    "name": "",
                    "type": "address"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "name": "candidates",
            "outputs": [
                {
                    "internalType": "string",
                    "name": "name",
                    "type": "string"
                },
                {
                    "internalType": "string",
                    "name": "partyName",
                    "type": "string"
                },
                {
                    "internalType": "uint256",
                    "name": "noOfvotes",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "uint256",
                    "name": "choice",
                    "type": "uint256"
                }
            ],
            "name": "changeSession",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "uint256",
                    "name": "indexOfcandidate",
                    "type": "uint256"
                }
            ],
            "name": "vote",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
        }
    ];



    // const contract =new web3.eth.Contract(abi ,txHash);
    // contract.methods.candidates("0").call((err,result)=>{console.log({err,result});});
  })



  })





